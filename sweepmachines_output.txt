For machine 3858969: 
C1L A1L  @1L A1R  D1R D1R  B1L E1R  E1L C1R  
Halt state unreachable!
For machine 3858989: 
C1L A1L  @1L A1L  D1R D1R  B1L E1R  E1L C1R  
Halt state unreachable!
For machine 3858995: 
C1L C0L  @1L A1L  D1R D1R  B1L E1R  E1L C1R  
Halt state unreachable!
For machine 3858997: 
C1L B0L  @1L A1L  D1R D1R  B1L E1R  E1L C1R  
0	0	0	2	29	0	0	1	25	0	0	1	21	0	0	1	17	0	0	1	13	0	0	1	9	0	0	1	5	0	
0	-1	-1	148	179	-1	-1	148	175	-1	-1	148	171	-1	-1	148	167	-1	-1	148	163	-1	-1	148	159	-1	-1	148	155	-1	
0	0	0	0	15	0	0	1	13	0	0	1	11	0	0	1	9	0	0	1	7	0	0	1	5	0	0	1	3	0	

0	0	20	0	18	0	16	0	14	0	12	0	10	0	8	0	6	0	4	0	2	0	0	0	0	0	0	0	0	0	
0	-1	206	-1	204	-1	202	-1	200	-1	198	-1	196	-1	194	-1	192	-1	190	-1	188	-1	-1	-1	-1	-1	-1	-1	-1	-1	
0	0	-20	0	-18	0	-16	0	-14	0	-12	0	-10	0	-8	0	-6	0	-4	0	-2	0	0	0	0	0	0	0	0	0	

Could not find two positions with a displacement of 2 visited only once in the swath
D (10)^(n) 0
D (11)^(n) 2n
baseCase: true
Next up: assuming D (10)^(n) 0 yields D (11)^(n) 2n in 4n steps,
we prove that D (10)^(1+n) 0 yields D (11)^(1+n) 2+2n in 4+4n steps.
B (11)^(n) -1+2n
B (01)^(n) -1
baseCase: true
Next up: assuming B (11)^(n) -1+2n yields B (01)^(n) -1 in 2n steps,
we prove that B (11)^(1+n) 1+2n yields B (01)^(1+n) -1 in 2+2n steps.
C1L B0L  @1L A1L  D1R D1R  B1L E1R  E1L C1R  
Sweep.lrStepNums says: 55 78 95 126 147 186 211 258 287 342 375 438 475 546 587 666 711 798 847 942 995 1098 1155 1266 1327 1446 1511 1638 1707 1841 
     with differences: 23 17 31 21 39 25 47 29 55 33 63 37 71 41 79 45 87 49 95 53 103 57 111 61 119 65 127 69 134 
Alternate second differences:
12	12	12	12	12	12	12	12	12	12	12	12	12	
12	12	12	12	12	12	12	12	12	12	12	12	11	
And the StepConfiguration at the first two steps:
0 55 C o1101010101011
0 C (01)^1(10)^5(11)^1 0
1 78 D 111111111111111o
1 D (1)^1(11)^7(0)^1 15
2 95 C o11010101010101011
2 C (01)^1(10)^7(11)^1 0
3 126 D 1111111111111111111o
3 D (1)^1(11)^9(0)^1 19
4 147 C o110101010101010101011
4 C (01)^1(10)^9(11)^1 0
5 186 D 11111111111111111111111o
5 D (1)^1(11)^11(0)^1 23
6 211 C o1101010101010101010101011
6 C (01)^1(10)^11(11)^1 0
7 258 D 111111111111111111111111111o
7 D (1)^1(11)^13(0)^1 27
8 287 C o11010101010101010101010101011
8 C (01)^1(10)^13(11)^1 0
9 342 D 1111111111111111111111111111111o
9 D (1)^1(11)^15(0)^1 31
bestFirstIndex: 4
bestSecondIndex: 5
1. Debug code: in printEverything(): StepConfiguration sc = 145 B i0101010101010101011 with index 91 has best spot 91 for pattern = 1 0  in direction R targeting state D
1. Debug code: in printEverything(): StepConfiguration sc = 183 D 11111111111111111111i1 with index 109 has best spot 110 for pattern = 1 1  in direction L targeting state B
1. Debug code: in printEverything(): StepConfiguration sc = 209 B i01010101010101010101011 with index 89 has best spot 89 for pattern = 1 0  in direction R targeting state D
Debug code. In cc.generalize(): cc=D (0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111)^1(10)^10(110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)^1 91
Got here 1
Got here 2
Debug code: tapeHeadRindex = -1 and rindex = 0
Debug code: tapeHeadRindex = -1 and rindex = 1
Debug code: tapeHeadLindex = -1 and lindex = 91
Debug code: tapeHeadLindex = -1 and lindex = 90
3858997 C1L B0L  @1L A1L  D1R D1R  B1L E1R  E1L C1R  
209 B i01010101010101010101011
For machine 3859182: 
C1L D1R  @1L A0L  D1R D1R  B1L E1R  E1L C1R  
Halt state unreachable!
For machine 3859187: 
C1L B1L  @1L A0L  D1R D1R  B1L E1R  E1L C1R  
0	0	0	0	28	0	0	0	24	0	0	0	20	0	0	0	16	0	0	0	12	0	0	0	8	0	0	0	4	0	
0	-1	-1	-1	141	-1	-1	-1	137	-1	-1	-1	133	-1	-1	-1	129	-1	-1	-1	125	-1	-1	-1	121	-1	-1	-1	117	-1	
0	0	0	0	14	0	0	0	12	0	0	0	10	0	0	0	8	0	0	0	6	0	0	0	4	0	0	0	2	0	

0	0	16	0	14	0	12	0	10	0	8	0	6	0	4	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	-1	166	-1	164	-1	162	-1	160	-1	158	-1	156	-1	154	-1	152	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
0	0	-16	0	-14	0	-12	0	-10	0	-8	0	-6	0	-4	0	-2	0	0	0	0	0	0	0	0	0	0	0	0	0	

Could not find two positions with a displacement of 2 visited only once in the swath
D (10)^(n) 0
D (11)^(n) 2n
baseCase: true
Next up: assuming D (10)^(n) 0 yields D (11)^(n) 2n in 4n steps,
we prove that D (10)^(1+n) 0 yields D (11)^(1+n) 2+2n in 4+4n steps.
B (11)^(n) -1+2n
B (10)^(n) -1
baseCase: true
Next up: assuming B (11)^(n) -1+2n yields B (10)^(n) -1 in 2n steps,
we prove that B (11)^(1+n) 1+2n yields B (10)^(1+n) -1 in 2+2n steps.
C1L B1L  @1L A0L  D1R D1R  B1L E1R  E1L C1R  
Sweep.lrStepNums says: 67 96 113 150 171 216 241 294 323 384 417 486 523 600 641 726 771 864 913 1014 1067 1176 1233 1350 1411 1536 1601 1734 1803 1941 
     with differences: 29 17 37 21 45 25 53 29 61 33 69 37 77 41 85 45 93 49 101 53 109 57 117 61 125 65 133 69 138 
Alternate second differences:
12	12	12	12	12	12	12	12	12	12	12	12	12	
12	12	12	12	12	12	12	12	12	12	12	12	9	
And the StepConfiguration at the first two steps:
0 67 C o1010101010101
0 C (0)^1(10)^6(1)^1 0
1 96 D 111111111111111o
1 D (1)^1(11)^7(0)^1 15
2 113 C o10101010101010101
2 C (0)^1(10)^8(1)^1 0
3 150 D 1111111111111111111o
3 D (1)^1(11)^9(0)^1 19
4 171 C o101010101010101010101
4 C (0)^1(10)^10(1)^1 0
5 216 D 11111111111111111111111o
5 D (1)^1(11)^11(0)^1 23
6 241 C o1010101010101010101010101
6 C (0)^1(10)^12(1)^1 0
7 294 D 111111111111111111111111111o
7 D (1)^1(11)^13(0)^1 27
8 323 C o10101010101010101010101010101
8 C (0)^1(10)^14(1)^1 0
9 384 D 1111111111111111111111111111111o
9 D (1)^1(11)^15(0)^1 31
bestFirstIndex: 2
bestSecondIndex: 3
1. Debug code: in printEverything(): StepConfiguration sc = 111 B i101010101010101 with index 93 has best spot 94 for pattern = 1 0  in direction R targeting state D
1. Debug code: in printEverything(): StepConfiguration sc = 150 D 1111111111111111111o with index 110 has best spot 108 for pattern = 1 1  in direction L targeting state B
1. Debug code: in printEverything(): StepConfiguration sc = 169 B i1010101010101010101 with index 91 has best spot 92 for pattern = 1 0  in direction R targeting state D
Debug code. In cc.generalize(): cc=D (000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)^1(10)^11(00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)^1 90
Debug code: tapeHeadLindex = 89 and lindex = 89
Debug code: tapeHeadLindex = 88 and lindex = 89
Debug code: tapeHeadLindex = 88 and lindex = 88
Debug code: tapeHeadLindex = 87 and lindex = 89
Debug code: tapeHeadLindex = 87 and lindex = 88
3859187 C1L B1L  @1L A0L  D1R D1R  B1L E1R  E1L C1R  
169 B i1010101010101010101
For machine 3859189: 
C1L A1L  @1L A0L  D1R D1R  B1L E1R  E1L C1R  
Halt state unreachable!
For machine 3859195: 
C1L C0L  @1L A0L  D1R D1R  B1L E1R  E1L C1R  
Halt state unreachable!
For machine 3859923: 
C1L B0R  @1L D1L  D1R D1R  A1L E1R  E1L C1R  
Halt state unreachable!
For machine 3862989: 
C1L A1L  @1L A1L  D1R D1R  B0L E1R  E1L C1R  
Halt state unreachable!
For machine 3862995: 
C1L C0L  @1L A1L  D1R D1R  B0L E1R  E1L C1R  
Halt state unreachable!
For machine 3863187: 
C1L B1L  @1L A0L  D1R D1R  B0L E1R  E1L C1R  
0	0	0	0	16	0	0	0	12	0	0	0	8	0	0	0	4	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	-1	-1	-1	127	-1	-1	-1	123	-1	-1	-1	119	-1	-1	-1	115	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
0	0	0	0	8	0	0	0	6	0	0	0	4	0	0	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	

0	0	10	0	8	0	6	0	4	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	-1	146	-1	144	-1	142	-1	140	-1	138	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
0	0	-10	0	-8	0	-6	0	-4	0	-2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	

Could not find two positions with a displacement of 2 visited only once in the swath
D (10)^(n) 0
D (11)^(n) 2n
baseCase: true
Next up: assuming D (10)^(n) 0 yields D (11)^(n) 2n in 4n steps,
we prove that D (10)^(1+n) 0 yields D (11)^(1+n) 2+2n in 4+4n steps.
B (11)^(n) -1+2n
B (10)^(n) -1
baseCase: true
Next up: assuming B (11)^(n) -1+2n yields B (10)^(n) -1 in 2n steps,
we prove that B (11)^(1+n) 1+2n yields B (10)^(1+n) -1 in 2+2n steps.
C1L B1L  @1L A0L  D1R D1R  B0L E1R  E1L C1R  
Sweep.lrStepNums says: 77 98 111 136 151 180 197 230 249 286 307 348 371 416 441 490 517 570 599 656 687 748 781 846 881 950 987 1060 1099 1173 
     with differences: 21 13 25 15 29 17 33 19 37 21 41 23 45 25 49 27 53 29 57 31 61 33 65 35 69 37 73 39 74 
Alternate second differences:
6	6	6	6	6	6	6	6	6	6	6	6	6	
6	6	6	6	6	6	6	6	6	6	6	6	3	
And the StepConfiguration at the first two steps:
0 77 C o101010101
0 C (0)^1(10)^4(1)^1 0
1 98 D 11111111111o
1 D (1)^1(11)^5(0)^1 11
2 111 C o10101010101
2 C (0)^1(10)^5(1)^1 0
3 136 D 1111111111111o
3 D (1)^1(11)^6(0)^1 13
4 151 C o1010101010101
4 C (0)^1(10)^6(1)^1 0
5 180 D 111111111111111o
5 D (1)^1(11)^7(0)^1 15
6 197 C o101010101010101
6 C (0)^1(10)^7(1)^1 0
7 230 D 11111111111111111o
7 D (1)^1(11)^8(0)^1 17
8 249 C o10101010101010101
8 C (0)^1(10)^8(1)^1 0
9 286 D 1111111111111111111o
9 D (1)^1(11)^9(0)^1 19
bestFirstIndex: 2
bestSecondIndex: 3
1. Debug code: in printEverything(): StepConfiguration sc = 110 A o0101010101 with index 90 has best spot 92 for pattern = 1 0  in direction R targeting state D
1. Debug code: in printEverything(): StepConfiguration sc = 136 D 1111111111111o with index 102 has best spot 100 for pattern = 1 1  in direction L targeting state B
1. Debug code: in printEverything(): StepConfiguration sc = 149 B i10101010101 with index 89 has best spot 90 for pattern = 1 0  in direction R targeting state D
Debug code. In cc.generalize(): cc=D (0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)^1(10)^7(000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)^1 88
Debug code: tapeHeadLindex = 87 and lindex = 87
Debug code: tapeHeadLindex = 86 and lindex = 87
Debug code: tapeHeadLindex = 86 and lindex = 86
Debug code: tapeHeadLindex = 85 and lindex = 87
Debug code: tapeHeadLindex = 85 and lindex = 86
Sweep proved!!
For machine 3863189: 
C1L A1L  @1L A0L  D1R D1R  B0L E1R  E1L C1R  
Halt state unreachable!
For machine 3866969: 
C1L A1L  @1L A1R  D1R D1L  B1L E1R  E1L C1R  
0	0	0	44	0	0	41	0	0	38	0	0	35	0	0	32	0	0	29	0	0	26	0	0	23	0	0	20	0	0	
0	-1	-1	193	-1	-1	190	-1	-1	187	-1	-1	184	-1	-1	181	-1	-1	178	-1	-1	175	-1	-1	172	-1	-1	169	-1	-1	
0	0	0	16	0	0	15	0	0	14	0	0	13	0	0	12	0	0	11	0	0	10	0	0	9	0	0	8	0	0	

0	19	18	17	16	15	14	13	12	11	10	9	8	7	6	5	4	3	2	1	0	0	0	0	0	0	0	0	0	0	
0	221	220	219	218	217	216	215	214	213	212	211	210	209	208	207	206	205	204	203	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
0	-17	-16	-15	-14	-13	-12	-11	-10	-9	-8	-7	-6	-5	-4	-3	-2	-1	0	1	0	0	0	0	0	0	0	0	0	0	

Could not find two positions with a displacement of 1 visited only once in the swath
D (1)^(n) 0
D (1)^(n) n
baseCase: true
Next up: assuming D (1)^(n) 0 yields D (1)^(n) n in 3n steps,
we prove that D (1)^(1+n) 0 yields D (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
E (1)^(n) 0
E (1)^(n) n
baseCase: true
Next up: assuming E (1)^(n) 0 yields E (1)^(n) n in 3n steps,
we prove that E (1)^(1+n) 0 yields E (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
C (1)^(n) 0
C (1)^(n) n
baseCase: true
Next up: assuming C (1)^(n) 0 yields C (1)^(n) n in 3n steps,
we prove that C (1)^(1+n) 0 yields C (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index -1 makes configuration of length 1 dead
Perhaps the lemma is not true?
3866969 
C1L A1L  @1L A1R  D1R D1L  B1L E1R  E1L C1R  
223 A i11111111111111111111
For machine 3866989: 
C1L A1L  @1L A1L  D1R D1L  B1L E1R  E1L C1R  
0	0	0	44	0	0	41	0	0	38	0	0	35	0	0	32	0	0	29	0	0	26	0	0	23	0	0	20	0	0	
0	-1	-1	185	-1	-1	182	-1	-1	179	-1	-1	176	-1	-1	173	-1	-1	170	-1	-1	167	-1	-1	164	-1	-1	161	-1	-1	
0	0	0	16	0	0	15	0	0	14	0	0	13	0	0	12	0	0	11	0	0	10	0	0	9	0	0	8	0	0	

0	17	16	15	14	13	12	11	10	9	8	7	6	5	4	3	2	1	0	0	0	0	0	0	0	0	0	0	0	0	
0	211	210	209	208	207	206	205	204	203	202	201	200	199	198	197	196	195	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
0	-17	-16	-15	-14	-13	-12	-11	-10	-9	-8	-7	-6	-5	-4	-3	-2	-1	0	0	0	0	0	0	0	0	0	0	0	0	

Could not find two positions with a displacement of 1 visited only once in the swath
D (1)^(n) 0
D (1)^(n) n
baseCase: true
Next up: assuming D (1)^(n) 0 yields D (1)^(n) n in 3n steps,
we prove that D (1)^(1+n) 0 yields D (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
E (1)^(n) 0
E (1)^(n) n
baseCase: true
Next up: assuming E (1)^(n) 0 yields E (1)^(n) n in 3n steps,
we prove that E (1)^(1+n) 0 yields E (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
C (1)^(n) 0
C (1)^(n) n
baseCase: true
Next up: assuming C (1)^(n) 0 yields C (1)^(n) n in 3n steps,
we prove that C (1)^(1+n) 0 yields C (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index -1 makes configuration of length 1 dead
Perhaps the lemma is not true?
3866989 
C1L A1L  @1L A1L  D1R D1L  B1L E1R  E1L C1R  
213 A i11111111111111111111
For machine 3867182: 
C1L D1R  @1L A0L  D1R D1L  B1L E1R  E1L C1R  
0	0	0	34	1	0	31	1	0	28	1	0	25	1	0	22	1	0	19	1	0	16	1	0	13	1	0	10	1	0	
0	-1	-1	169	134	-1	166	134	-1	163	134	-1	160	134	-1	157	134	-1	154	134	-1	151	134	-1	148	134	-1	145	134	-1	
0	0	0	10	1	0	9	1	0	8	1	0	7	1	0	6	1	0	5	1	0	4	1	0	3	1	0	2	1	0	

0	0	0	41	0	0	38	0	0	35	0	0	32	0	0	29	0	0	26	0	0	23	0	0	20	0	0	17	0	0	
0	-1	-1	217	-1	-1	214	-1	-1	211	-1	-1	208	-1	-1	205	-1	-1	202	-1	-1	199	-1	-1	196	-1	-1	193	-1	-1	
0	0	0	-13	0	0	-12	0	0	-11	0	0	-10	0	0	-9	0	0	-8	0	0	-7	0	0	-6	0	0	-5	0	0	

Could not find two positions with a displacement of 1 visited only once in the swath
E (1)^(n) 0
E (1)^(n) n
baseCase: true
Next up: assuming E (1)^(n) 0 yields E (1)^(n) n in 3n steps,
we prove that E (1)^(1+n) 0 yields E (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
C (1)^(n) 0
C (1)^(n) n
baseCase: true
Next up: assuming C (1)^(n) 0 yields C (1)^(n) n in 3n steps,
we prove that C (1)^(1+n) 0 yields C (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index -1 makes configuration of length 1 dead
Perhaps the lemma is not true?
D (1)^(n) 0
D (1)^(n) n
baseCase: true
Next up: assuming D (1)^(n) 0 yields D (1)^(n) n in 3n steps,
we prove that D (1)^(1+n) 0 yields D (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
3867182 
C1L D1R  @1L A0L  D1R D1L  B1L E1R  E1L C1R  
221 A i0111111111111111
For machine 3867189: 
C1L A1L  @1L A0L  D1R D1L  B1L E1R  E1L C1R  
0	0	0	50	0	0	47	0	0	44	0	0	41	0	0	38	0	0	35	0	0	32	0	0	29	0	0	26	0	0	
0	-1	-1	209	-1	-1	206	-1	-1	203	-1	-1	200	-1	-1	197	-1	-1	194	-1	-1	191	-1	-1	188	-1	-1	185	-1	-1	
0	0	0	18	0	0	17	0	0	16	0	0	15	0	0	14	0	0	13	0	0	12	0	0	11	0	0	10	0	0	

0	21	20	19	18	17	16	15	14	13	12	11	10	9	8	7	6	5	4	3	2	1	0	0	0	0	0	0	0	0	
0	243	242	241	240	239	238	237	236	235	234	233	232	231	230	229	228	227	226	225	224	223	-1	-1	-1	-1	-1	-1	-1	-1	
0	-21	-20	-19	-18	-17	-16	-15	-14	-13	-12	-11	-10	-9	-8	-7	-6	-5	-4	-3	-2	-1	0	0	0	0	0	0	0	0	

Could not find two positions with a displacement of 1 visited only once in the swath
D (1)^(n) 0
D (1)^(n) n
baseCase: true
Next up: assuming D (1)^(n) 0 yields D (1)^(n) n in 3n steps,
we prove that D (1)^(1+n) 0 yields D (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
E (1)^(n) 0
E (1)^(n) n
baseCase: true
Next up: assuming E (1)^(n) 0 yields E (1)^(n) n in 3n steps,
we prove that E (1)^(1+n) 0 yields E (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
C (1)^(n) 0
C (1)^(n) n
baseCase: true
Next up: assuming C (1)^(n) 0 yields C (1)^(n) n in 3n steps,
we prove that C (1)^(1+n) 0 yields C (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index -1 makes configuration of length 1 dead
Perhaps the lemma is not true?
3867189 
C1L A1L  @1L A0L  D1R D1L  B1L E1R  E1L C1R  
245 A i111111111111111111111101
For machine 3867749: 
C1L B1L  @1L A1L  D1R D1L  A1L E1R  E1L C1R  
0	0	0	44	0	0	41	0	0	38	0	0	35	0	0	32	0	0	29	0	0	26	0	0	23	0	0	20	0	0	
0	-1	-1	185	-1	-1	182	-1	-1	179	-1	-1	176	-1	-1	173	-1	-1	170	-1	-1	167	-1	-1	164	-1	-1	161	-1	-1	
0	0	0	16	0	0	15	0	0	14	0	0	13	0	0	12	0	0	11	0	0	10	0	0	9	0	0	8	0	0	

0	0	17	0	15	0	13	0	11	0	9	0	7	0	5	0	3	0	1	0	0	0	0	0	0	0	0	0	0	0	
0	-1	210	-1	208	-1	206	-1	204	-1	202	-1	200	-1	198	-1	196	-1	194	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
0	0	-17	0	-15	0	-13	0	-11	0	-9	0	-7	0	-5	0	-3	0	-1	0	0	0	0	0	0	0	0	0	0	0	

Could not find two positions with a displacement of 1 visited only once in the swath
D (1)^(n) 0
D (1)^(n) n
baseCase: true
Next up: assuming D (1)^(n) 0 yields D (1)^(n) n in 3n steps,
we prove that D (1)^(1+n) 0 yields D (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
E (1)^(n) 0
E (1)^(n) n
baseCase: true
Next up: assuming E (1)^(n) 0 yields E (1)^(n) n in 3n steps,
we prove that E (1)^(1+n) 0 yields E (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
C (1)^(n) 0
C (1)^(n) n
baseCase: true
Next up: assuming C (1)^(n) 0 yields C (1)^(n) n in 3n steps,
we prove that C (1)^(1+n) 0 yields C (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index -1 makes configuration of length 1 dead
Perhaps the lemma is not true?
3867749 
C1L B1L  @1L A1L  D1R D1L  A1L E1R  E1L C1R  
213 B i11111111111111111111
For machine 3867754: 
C1L B1L  @1L C0R  D1R D1L  A1L E1R  E1L C1R  
0	0	0	44	0	0	41	0	0	38	0	0	35	0	0	32	0	0	29	0	0	26	0	0	23	0	0	20	0	0	
0	-1	-1	225	-1	-1	222	-1	-1	219	-1	-1	216	-1	-1	213	-1	-1	210	-1	-1	207	-1	-1	204	-1	-1	201	-1	-1	
0	0	0	16	0	0	15	0	0	14	0	0	13	0	0	12	0	0	11	0	0	10	0	0	9	0	0	8	0	0	

0	0	0	0	34	0	0	1	30	0	0	1	26	0	0	1	22	0	0	1	18	0	0	1	14	0	0	1	10	0	
0	-1	-1	-1	266	-1	-1	229	262	-1	-1	229	258	-1	-1	229	254	-1	-1	229	250	-1	-1	229	246	-1	-1	229	242	-1	
0	0	0	0	-16	0	0	0	-14	0	0	0	-12	0	0	0	-10	0	0	0	-8	0	0	0	-6	0	0	0	-4	0	

Could not find two positions with a displacement of 1 visited only once in the swath
D (1)^(n) 0
D (1)^(n) n
baseCase: true
Next up: assuming D (1)^(n) 0 yields D (1)^(n) n in 3n steps,
we prove that D (1)^(1+n) 0 yields D (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
E (1)^(n) 0
E (1)^(n) n
baseCase: true
Next up: assuming E (1)^(n) 0 yields E (1)^(n) n in 3n steps,
we prove that E (1)^(1+n) 0 yields E (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index 1 makes configuration of length 1 dead
Perhaps the lemma is not true?
C (1)^(n) 0
C (1)^(n) n
baseCase: true
Next up: assuming C (1)^(n) 0 yields C (1)^(n) n in 3n steps,
we prove that C (1)^(1+n) 0 yields C (1)^(1+n) 1+n in 3+3n steps.
Linear induction exception: Index -1 makes configuration of length 1 dead
Perhaps the lemma is not true?
3867754 
C1L B1L  @1L C0R  D1R D1L  A1L E1R  E1L C1R  
271 B i11111111111111111111
For machine 3867759: 
C1L B1L  @1L A0L  D1R D1L  A1L E1R  E1L C1R  
0	0	0	4	1	0	1	4	0	0	32	0	0	4	1	0	1	4	0	0	22	0	0	4	1	0	1	4	0	0	
0	-1	-1	135	130	-1	132	138	-1	-1	160	-1	-1	135	130	-1	132	138	-1	-1	150	-1	-1	135	130	-1	132	138	-1	-1	
0	0	0	0	1	0	-1	2	0	0	12	0	0	0	1	0	-1	2	0	0	8	0	0	0	1	0	-1	2	0	0	

0	0	17	0	15	0	13	0	11	0	9	0	7	0	5	0	3	0	1	0	0	0	0	0	0	0	0	0	0	0	
0	-1	190	-1	188	-1	186	-1	184	-1	182	-1	180	-1	178	-1	176	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
0	0	-17	0	-15	0	-13	0	-11	0	-9	0	-7	0	-5	0	-3	0	-1	0	0	0	0	0	0	0	0	0	0	0	

C (0101)^(n) 0
C (1111)^(n) 4n
baseCase: true
Next up: assuming C (0101)^(n) 0 yields C (1111)^(n) 4n in 10n steps,
we prove that C (0101)^(1+n) 0 yields C (1111)^(1+n) 4+4n in 10+10n steps.
A (11)^(n) -1+2n
A (01)^(n) -1
baseCase: true
Next up: assuming A (11)^(n) -1+2n yields A (01)^(n) -1 in 2n steps,
we prove that A (11)^(1+n) 1+2n yields A (01)^(1+n) -1 in 2+2n steps.
C1L B1L  @1L A0L  D1R D1L  A1L E1R  E1L C1R  
Sweep.lrStepNums says: 77 111 129 173 195 249 275 339 369 443 477 561 599 693 735 839 885 999 1049 1173 1227 1361 1419 1563 1625 1779 1845 2009 2079 2252 
     with differences: 34 18 44 22 54 26 64 30 74 34 84 38 94 42 104 46 114 50 124 54 134 58 144 62 154 66 164 70 173 
Alternate second differences:
14	14	14	14	14	14	14	14	14	14	14	14	14	
14	14	14	14	14	14	14	14	14	14	14	14	13	
And the StepConfiguration at the first two steps:
0 77 C o10101010101011
0 C (0101)^3(011)^1 0
1 111 D 1111111111111111o
1 D (11)^8(0)^1 16
2 129 C o101010101010101011
2 C (0101)^4(011)^1 0
3 173 D 11111111111111111111o
3 D (11)^10(0)^1 20
4 195 C o1010101010101010101011
4 C (0101)^5(011)^1 0
5 249 D 111111111111111111111111o
5 D (11)^12(0)^1 24
6 275 C o10101010101010101010101011
6 C (0101)^6(011)^1 0
7 339 D 1111111111111111111111111111o
7 D (11)^14(0)^1 28
8 369 C o101010101010101010101010101011
8 C (0101)^7(011)^1 0
9 443 D 11111111111111111111111111111111o
9 D (11)^16(0)^1 32
bestFirstIndex: 2
bestSecondIndex: 3
1. Debug code: in printEverything(): StepConfiguration sc = 127 B i1010101010101011 with index 93 has best spot 95 for pattern = 0 1 0 1  in direction R targeting state C
1. Debug code: in printEverything(): StepConfiguration sc = 169 C 1111111111111111o11 with index 107 has best spot 106 for pattern = 1 1  in direction L targeting state A
1. Debug code: in printEverything(): StepConfiguration sc = 194 A o010101010101010101011 with index 90 has best spot 91 for pattern = 0 1 0 1  in direction R targeting state C
Debug code. In cc.generalize(): cc=C (00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)^1(0101)^5(01100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)^1 89
Debug code: tapeHeadRindex = -1 and rindex = 0
Debug code: tapeHeadRindex = -1 and rindex = 1
Debug code: tapeHeadLindex = 88 and lindex = 88
Debug code: tapeHeadLindex = 87 and lindex = 88
Debug code: tapeHeadLindex = 87 and lindex = 87
Debug code: tapeHeadLindex = 88 and lindex = 88
Debug code: tapeHeadLindex = -1 and lindex = 90
Debug code: tapeHeadLindex = -1 and lindex = 89
Debug code: tapeHeadLindex = -1 and lindex = 88
Debug code: tapeHeadLindex = -1 and lindex = 87
Debug code: tapeHeadRindex = -1 and rindex = 0
Debug code: tapeHeadRindex = -1 and rindex = 1
Debug code: tapeHeadLindex = 86 and lindex = 86
Debug code: tapeHeadLindex = 85 and lindex = 86
Debug code: tapeHeadLindex = 85 and lindex = 85
Debug code: tapeHeadLindex = 86 and lindex = 86
Debug code: tapeHeadLindex = -1 and lindex = 88
Debug code: tapeHeadLindex = -1 and lindex = 87
Debug code: tapeHeadLindex = -1 and lindex = 86
Debug code: tapeHeadLindex = -1 and lindex = 85
3867759 C1L B1L  @1L A0L  D1R D1L  A1L E1R  E1L C1R  
193 B i10101010101010101011
For machine 3867923: 
C1L B0R  @1L D1L  D1R D1L  A1L E1R  E1L C1R  
Halt state unreachable!
For machine 3867949: 
C1L B0L  @1L A1L  D1R D1L  A1L E1R  E1L C1R  
0	0	0	4	1	0	1	4	0	0	29	0	0	4	1	0	1	4	0	0	19	0	0	4	1	0	1	4	0	0	
0	-1	-1	138	131	-1	135	141	-1	-1	158	-1	-1	138	131	-1	135	141	-1	-1	148	-1	-1	138	131	-1	135	141	-1	-1	
0	0	0	0	1	0	-1	2	0	0	13	0	0	0	1	0	-1	2	0	0	9	0	0	0	1	0	-1	2	0	0	

0	0	17	0	15	0	13	0	11	0	9	0	7	0	5	0	3	0	1	0	0	0	0	0	0	0	0	0	0	0	
0	-1	190	-1	188	-1	186	-1	184	-1	182	-1	180	-1	178	-1	176	-1	174	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	
0	0	-17	0	-15	0	-13	0	-11	0	-9	0	-7	0	-5	0	-3	0	-1	0	0	0	0	0	0	0	0	0	0	0	

C (0101)^(n) 0
C (1111)^(n) 4n
baseCase: true
Next up: assuming C (0101)^(n) 0 yields C (1111)^(n) 4n in 10n steps,
we prove that C (0101)^(1+n) 0 yields C (1111)^(1+n) 4+4n in 10+10n steps.
A (11)^(n) -1+2n
A (10)^(n) -1
baseCase: true
Next up: assuming A (11)^(n) -1+2n yields A (10)^(n) -1 in 2n steps,
we prove that A (11)^(1+n) 1+2n yields A (10)^(1+n) -1 in 2+2n steps.
C1L B0L  @1L A1L  D1R D1L  A1L E1R  E1L C1R  
Sweep.lrStepNums says: 77 111 129 173 195 249 275 339 369 443 477 561 599 693 735 839 885 999 1049 1173 1227 1361 1419 1563 1625 1779 1845 2009 2079 2252 
     with differences: 34 18 44 22 54 26 64 30 74 34 84 38 94 42 104 46 114 50 124 54 134 58 144 62 154 66 164 70 173 
Alternate second differences:
14	14	14	14	14	14	14	14	14	14	14	14	14	
14	14	14	14	14	14	14	14	14	14	14	14	13	
And the StepConfiguration at the first two steps:
0 77 C o11010101010101
0 C (011)^1(0101)^3 0
1 111 D 1111111111111111o
1 D (11)^8(0)^1 16
2 129 C o110101010101010101
2 C (011)^1(0101)^4 0
3 173 D 11111111111111111111o
3 D (11)^10(0)^1 20
4 195 C o1101010101010101010101
4 C (011)^1(0101)^5 0
5 249 D 111111111111111111111111o
5 D (11)^12(0)^1 24
6 275 C o11010101010101010101010101
6 C (011)^1(0101)^6 0
7 339 D 1111111111111111111111111111o
7 D (11)^14(0)^1 28
8 369 C o110101010101010101010101010101
8 C (011)^1(0101)^7 0
9 443 D 11111111111111111111111111111111o
9 D (11)^16(0)^1 32
bestFirstIndex: 2
bestSecondIndex: 3
1. Debug code: in printEverything(): StepConfiguration sc = 127 B i0101010101010101 with index 93 has best spot 92 for pattern = 0 1 0 1  in direction R targeting state C
1. Debug code: in printEverything(): StepConfiguration sc = 172 C 1111111111111111111o with index 110 has best spot 108 for pattern = 1 1  in direction L targeting state A
1. Debug code: in printEverything(): StepConfiguration sc = 194 A o101010101010101010101 with index 90 has best spot 90 for pattern = 0 1 0 1  in direction R targeting state C
Debug code. In cc.generalize(): cc=C (00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111)^1(0101)^5(00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)^1 92
Debug code: tapeHeadRindex = -1 and rindex = 0
Debug code: tapeHeadRindex = -1 and rindex = 1
Debug code: tapeHeadLindex = 91 and lindex = 91
Debug code: tapeHeadLindex = 90 and lindex = 91
Debug code: tapeHeadLindex = 90 and lindex = 90
Debug code: tapeHeadLindex = 89 and lindex = 91
Debug code: tapeHeadLindex = 89 and lindex = 90
Debug code: tapeHeadLindex = 88 and lindex = 89
Debug code: tapeHeadLindex = 89 and lindex = 89
3867949 C1L B0L  @1L A1L  D1R D1L  A1L E1R  E1L C1R  
193 B i01010101010101010101
3867955 
