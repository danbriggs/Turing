15: B1L H1L  C1L B1R  D1R E1L  B1R D0R  A1L C0L  |  6594274 | ---- | 337 |  0  6  0 14  0  7  0  0  0  0  0 15  0  0  0

Halt is achieved from A1.
A is achieved from E0: A1L only.
E is achieved from C1: E1L only.
C is achieved from B0: C1L and E1: C0L.

Thus 101o B
     101i E

are the only ways to get halt.


20 further to the right makes for 40 more steps

356526731314189519247709158424 C i

Starting from step 31167,

"CEABC": this is the phase of the machine writing four 1s (three new 1s)
and going to the left from the leftmost 1 bit.

Then it will be in state D as it goes to the right through the 1s, turning them to 0s.

When it hits a zero, it changes it to a 1 and turns to state B,
which it will be in preserving 1s and going to the right until it hits the next 0,
which it will turn into a 1 and go to the left.

At that point, it will necessarily be in C/E alternation going to the left across the swath of 1s it just created,
alternately keeping and flipping them. That will necessarily be for evenly many 1s,
as by hypothesis there were oddly many before we added one.

When it hits the 0 in state C,
it will go DBBCECE as it goes 3 right and 4 left,
leaving 1011 right of the tape head.

It continues to the left in ABC, leaving 1s behind.


Starting from step 31203, it will carry out all the same steps,
as none of the conditions were any different.

When it is done carrying these out, the only difference is that now it is not at the left end of the tape.
In particular, it does its CEABC on steps 231–35 (closer to the beginning since swaths were shorter),
and then does a "subroutine" of the same ending in CEABC on steps 59–63.
Since it left that 1 behind from step 35, that carries it left to step 31267,
at which point it has left its eight 1s behind to the right of the tape head,
reached the left end of the tape, and is ready to start a new phase with more recursion.

- - - - -

Now at step 31267 C, it has 8 1s after the i, which of course become 12 1s after the o by 31271 C.
The numbers of 1s after each 0 to the right of that is: 3 5 7 1 1 5 1 3 1 1 1 3 7 1 1 1 1 1 1 2.
It makes it
• back to bit 8 at 31303 (so 36 steps);
• back to bit 4 at 31343 (so 40 more steps);
• back to bit 8 at 31371 (so 38 more steps); 
• back to bit 0 at 31407 (so 36 more steps; 40 to bit -4).

Idea: set up some *exact* lemmas in Java or Python, simple lemmas,
lemmas regarding concrete strings (no variables).
Since this particular machine seems to have to do the same thing very often,
perhaps the lemmas will help accelerate it.

Have it generate a lemma about what it just accomplished every time it makes it back to the left
by keeping track of the rightmost bit it got to.

